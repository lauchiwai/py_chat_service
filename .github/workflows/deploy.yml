name: py Chatroom Deployment

on:
  push:
    branches: [release]

jobs:
  build-and-deploy:
    runs-on: [self-hosted, Windows, X64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: 'py_chat_service' 

    - name: Inject Environment Variables
      shell: cmd
      working-directory: ./py_chat_service  
      env:
        APP_ENV: ${{ secrets.PY_APP_ENV }}
        PYTHONUNBUFFERED: ${{ secrets.PY_PYTHONUNBUFFERED }}
        CHAT_SERVICE_HOST: ${{ secrets.PY_CHAT_SERVICE_HOST }}
        CHAT_SERVICE_PORT: ${{ secrets.PY_CHAT_SERVICE_PORT }}
        JWT_SECRET_KEY: ${{ secrets.PY_JWT_SECRET_KEY }}
        JWT_ISSUER: ${{ secrets.PY_JWT_ISSUER }}
        JWT_ALGORITHM: ${{ secrets.PY_JWT_ALGORITHM }}
        JWT_AUDIENCE: ${{ secrets.PY_JWT_AUDIENCE }}
        DEEPSEEK_API_KEY: ${{ secrets.PY_DEEPSEEK_API_KEY }}
        DEEPSEEK_BASE_URL: ${{ secrets.PY_DEEPSEEK_BASE_URL }}
        DEEPSEEK_MODAL: ${{ secrets.PY_DEEPSEEK_MODAL }}
        MONGODB_HOST: ${{ secrets.PY_MONGODB_HOST }}
        MONGODB_USER: ${{ secrets.PY_MONGODB_USER }}
        MONGODB_PASSWORD: ${{ secrets.PY_MONGODB_PASSWORD }}
        MONGODB_PORT: ${{ secrets.PY_MONGODB_PORT }}
        MONGODB_Permission: ${{ secrets.PY_MONGODB_Permission }}
        MONGODB_DATABASE: ${{ secrets.PY_MONGODB_DATABASE }}
        MONGODB_COLLECTION: ${{ secrets.PY_MONGODB_COLLECTION }}
        QDRANT_CLOUD_URL: ${{ secrets.PY_QDRANT_CLOUD_URL }}
        QDRANT_API_KEY: ${{ secrets.PY_QDRANT_API_KEY }}
        RBMQ_HOSTNAME: ${{ secrets.RBMQ_HOSTNAME }}
        RBMQ_USERNAME: ${{ secrets.RBMQ_USERNAME }}
        RBMQ_PASSWORD: ${{ secrets.RBMQ_PASSWORD }}
        MODEL_NAME: ${{ secrets.PY_MODEL_NAME }}
      run: |
        echo "Environment variables injected"

    - name: Create .env.production File
      shell: cmd
      working-directory: ./py_chat_service
      run: |
        echo APP_ENV=${{ secrets.PY_APP_ENV }} > .env.production
        echo PYTHONUNBUFFERED=${{ secrets.PY_PYTHONUNBUFFERED }} >> .env.production
        echo CHAT_SERVICE_HOST=${{ secrets.PY_CHAT_SERVICE_HOST }} >> .env.production
        echo CHAT_SERVICE_PORT=${{ secrets.PY_CHAT_SERVICE_PORT }} >> .env.production
        echo JWT_SECRET_KEY=${{ secrets.PY_JWT_SECRET_KEY }} >> .env.production
        echo JWT_ISSUER=${{ secrets.PY_JWT_ISSUER }} >> .env.production
        echo JWT_ALGORITHM=${{ secrets.PY_JWT_ALGORITHM }} >> .env.production
        echo JWT_AUDIENCE=${{ secrets.PY_JWT_AUDIENCE }} >> .env.production
        echo DEEPSEEK_API_KEY=${{ secrets.PY_DEEPSEEK_API_KEY }} >> .env.production
        echo DEEPSEEK_BASE_URL=${{ secrets.PY_DEEPSEEK_BASE_URL }} >> .env.production
        echo DEEPSEEK_MODAL=${{ secrets.PY_DEEPSEEK_MODAL }} >> .env.production
        echo MONGODB_HOST=${{ secrets.PY_MONGODB_HOST }} >> .env.production
        echo MONGODB_USER=${{ secrets.PY_MONGODB_USER }} >> .env.production
        echo MONGODB_PASSWORD=${{ secrets.PY_MONGODB_PASSWORD }} >> .env.production
        echo MONGODB_PORT=${{ secrets.PY_MONGODB_PORT }} >> .env.production
        echo MONGODB_Permission=${{ secrets.PY_MONGODB_Permission }} >> .env.production
        echo MONGODB_DATABASE=${{ secrets.PY_MONGODB_DATABASE }} >> .env.production
        echo MONGODB_COLLECTION=${{ secrets.PY_MONGODB_COLLECTION }} >> .env.production
        echo QDRANT_CLOUD_URL=${{ secrets.PY_QDRANT_CLOUD_URL }} >> .env.production
        echo QDRANT_API_KEY=${{ secrets.PY_QDRANT_API_KEY }} >> .env.production
        echo RBMQ_HOSTNAME=${{ secrets.RBMQ_HOSTNAME }} >> .env.production
        echo RBMQ_USERNAME=${{ secrets.RBMQ_USERNAME }} >> .env.production
        echo RBMQ_PASSWORD=${{ secrets.RBMQ_PASSWORD }} >> .env.production
        echo MODEL_NAME=${{ secrets.PY_MODEL_NAME }} >> .env.production

    - name: Build Docker Image
      working-directory: ./py_chat_service
      run: |
        docker build -t py-chat-service:latest . 

    - name: Deploy Services
      working-directory: ./py_chat_service
      env:
        MONGODB_PASSWORD: ${{ secrets.PY_MONGODB_PASSWORD }}
        QDRANT_API_KEY: ${{ secrets.PY_QDRANT_API_KEY }}
        DEEPSEEK_API_KEY: ${{ secrets.PY_DEEPSEEK_API_KEY }}
      run: |
        docker-compose down
        docker-compose up -d

    - name: Prune Old Images
      run: |
          docker images "py-chat-service" --filter=reference='py-chat-service:*' --format "{{.Repository}}:{{.Tag}}" | 
          Where-Object { $_ -ne "py-chat-service:latest" } | 
          ForEach-Object { docker rmi -f $_ }

    - name: System Cleanup
      if: success()
      run: |
        docker system prune -f --filter "until=24h"
        docker volume prune -f